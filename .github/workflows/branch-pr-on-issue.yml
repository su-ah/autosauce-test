
name: Create branch for new issues

on:
  issues:
    types: [opened]
    
# thanks copilot for writing this for me
jobs:
  create_branch:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Git
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"

    - name: Determine team from labels
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      id: determine_team
      run: |
        ISSUE_LABELS=$(gh issue view ${{ github.event.issue.number }} --json labels --jq '.labels[].name')
        TEAM_LABELS=("animation" "rendering" "modeling")
        SELECTED_TEAM=""
        for TEAM in "${TEAM_LABELS[@]}"; do
          if [[ "$ISSUE_LABELS" == *"$TEAM"* && "$ISSUE_LABELS" != *"nobranch"* ]]; then
            SELECTED_TEAM=$TEAM
            break
          fi
        done
        if [ -z "$SELECTED_TEAM" ]; then
          echo "No valid team found or 'nobranch' label is present."
          exit 1
        fi

        echo "BASE_BRANCH=$SELECTED_TEAM-team-dev" >> $GITHUB_ENV
        echo "BRANCH_NAME=$SELECTED_TEAM-#${{ github.event.issue.number }}" >> $GITHUB_ENV

    - name: Create branch
      run: |
        BASE_BRANCH="${{ env.BASE_BRANCH }}"
        BRANCH_NAME="${{ env.BRANCH_NAME }}"
        git fetch origin "$BASE_BRANCH"
        git checkout -b "$BRANCH_NAME" "origin/$BASE_BRANCH"
        git push origin "$BRANCH_NAME"

    - name: create empty commit
      run: |
        git commit --allow-empty -m "Branch autogenerated (empty commit)"
        git push origin "${{ env.BRANCH_NAME }}"

    - name: Create draft pr
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        ISSUE_NUMBER=${{ github.event.issue.number }}
        BASE_BRANCH="${{ env.BASE_BRANCH }}"
        BRANCH_NAME="${{ env.BRANCH_NAME }}"
        PR_URL=$(gh pr create \
          --base "$BASE_BRANCH" \
          --head "$BRANCH_NAME" \
          --title "Implement #${ISSUE_NUMBER}" \
          --body "Resolves #${ISSUE_NUMBER}. This PR is auto-generated." \
          --label "${{ env.SELECTED_TEAM }}" \
          --draft)
        echo "PR_URL=$PR_URL" >> $GITHUB_ENV

    - name: Reference PR in issue
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        ISSUE_NUMBER=${{ github.event.issue.number }}
        PR_URL="${{ env.PR_URL }}"
        gh issue comment $ISSUE_NUMBER --body "Generated PR: $PR_URL"
