
name: Mark issue as IPR on PR commit

on:
  pull_request:
    types: [synchronize]

jobs:
  mark_ipr:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    
    - name: Set up Git
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
    
    - name: Find referenced issue number
      id: find_issue
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        ISSUE_NUMBER=$(gh pr view ${{ github.event.pull_request.number }} --json closingIssuesReferences --jq '.closingIssuesReferences[0].id')

    # yo copilot going crazy rn
    - name: Get project item and status
      id: get_project_status
      run: |
        if [ -z "${ISSUE_NUMBER}" ]; then
          echo "No referenced issue found."
          exit 0
        fi
        # Get the issue node ID
        ISSUE_NODE_ID=$(gh issue view $ISSUE_NUMBER --json id --jq '.id')
        # Get project items for the issue
        PROJECT_ITEM_ID=$(gh api graphql -f query='
          query {
            repository(owner: "${{ github.repository_owner }}", name: "${{ github.event.repository.name }}") {
              issue(number: '"$ISSUE_NUMBER"') {
                projectItems(first: 10) {
                  nodes {
                    id
                    status: fieldValueByName(name: "Status") {
                      name
                    }
                  }
                }
              }
            }
          }' --jq '.data.repository.issue.projectItems.nodes[] | select(.status.name == "todo") | .id')
        if [ -z "$PROJECT_ITEM_ID" ]; then
          echo "No project item with status 'todo' found."
          exit 0
        fi
        echo "PROJECT_ITEM_ID=$PROJECT_ITEM_ID" >> $GITHUB_ENV

    - name: Set project status to "in progress"
      if: env.PROJECT_ITEM_ID != ''
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Set the status field to "in progress"
        gh api graphql -f query='
          mutation {
            updateProjectV2ItemFieldValue(
              input: {
                projectId: "${{ github.event.repository.id }}",
                itemId: "${PROJECT_ITEM_ID}",
                fieldId: "status",
                value: { name: "in progress" }
              }
            ) {
              projectV2Item {
                id
              }
            }
          }'